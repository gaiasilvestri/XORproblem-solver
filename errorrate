% Gaia Silvestri, 57854101
% Neural network XOR problem
% with hidden units 
% November 2013
%

npass=10000;
nhidden=4;              %generalized program for any nhidden value
W1=zeros(nhidden,2);
W2=zeros(nhidden,1);
zout=zeros(1,4);
inp=[0 0; 0 1; 1 0; 1 1];
target1=[0 1 1 0]; % target for inp as above
target=[0 0 0 0];  % set to zeros now, it will be filled with targets corresponding to relevant pattern selection for each pass

maxerr=zeros(1,npass);



dW2=zeros(nhidden,1);
dW1=zeros(nhidden,2);


a=0.5;  
b=0.05;
alpha=0.7;      
m=0.8;
t=0.1;
hbias=zeros(nhidden,1);

obias=0;
%W1= [1 0; 0 0; 1 0; 0 1]; %for testing
%W2= [1; 0; 0; 1]; % for testing



% negative and positive weights between -1 and 1 in W1
for i=1:nhidden
    for k=1:2
    W1(i,k)=rand;           
    r=rand;
    if r<0.5
    W1(i,k)=W1(i,k)*-1;
    end
    end
end


% negative and positive weights between -1 and 1 in W2
for i=1:nhidden
    r=rand;
    W2(i,1)=rand;          
    if r<0.5
    W2(i,1)=W2(i,1)*-1;
    end
    
end
iterations=0;
for l=1:npass
    pindex=randperm(4);                     %rescramble patterns at every pass
    target=[0 0 0 0];                       %reset target for each pass
    for s=1:4                               %each pass contains all 4 patterns in a random order
        
        curpat=inp(pindex(1,s),:);          %current pattern 
        target(1,s)=target1(1,pindex(1,s));
        %curpat=[0 1]; %for testing
        %y=curpat.*W1';
        y =bsxfun(@times,curpat,W1);
        
        %we are in hidden layer
        y=sum(y,2);                          %this and previous line: multiplied current pattern by w1 
        for g=1:nhidden
        y(nhidden,1)=y(nhidden,1)+hbias(nhidden,1);                           %add bias to each hidden neuron
        end
        yout=1./(1+exp((-1*(y-a))./b));      %squashes activation of each hidden neuron
        yout=yout';
        %we are in output stuff
    
        z(1,s)=yout*W2;                           
        
        z(1,s)=z(1,s)+obias;                           %add obias to output neuron
        zout(1,s)=1./(1+exp((-1*(z(1,s)-a))./b));      %vector is filled when you did 4 patterns, then compare to comparison vector
        %compute error for output layer given current pattern
        currentzout=zout(1,s);
        
        d=currentzout*(1-currentzout)*(target(1,s)-currentzout);
        
        %compute error for hidden layer given current pattern [for each
        %hidden neuron: activation*(1-activation)*weight leaving that
        %neuron*d
        for c=1:nhidden
        e(1,c)= yout(1,c)*(1-yout(1,c))*W2(c,1)*d;
        end
        %change in W2
        for v=1:nhidden
        dW2(v,1)= alpha*yout(1,v)*d + m*dW2(v,1);
        end
        %adjust w2 for hidden-->output synapses
        W2=dW2+W2;
        %adjust obias
        obias=obias+alpha*d;
        %change in W1
        for x=1:2
            for q=1:nhidden
        dW1(q,x)= alpha*curpat(1,x)*e(1,q)+m*dW1(q,x);
            end
        end
        %adjust w1 for input -->hidden synapses
        W1=dW1+W1;
        %adjust hbias
        for p=1:nhidden
        hbias(p,1)=hbias(p,1)+alpha*e(1,p);
        end
        
    end
    maxerr(1,l)=max(abs(target-zout));
    
        %check zout for goodness (Tk-zout<t? for EACH PATTERN, break only
        %if all 4 patterns pass this check
        
        if abs(target(1,1)-zout(1,1))<t && abs(target(1,2)-zout(1,2))<t && abs(target(1,3)-zout(1,3))<t && abs(target(1,4)-zout(1,4))<t
           disp('target achieved within tolerance');
           disp(iterations);
           % uncomment to plot barplots of W1 and W2 at convergence
           %{
           figure
           subplot(2,1,1);
           bar(W1);
           title('Subplot 1: W1 weights pattern (barplot)');
           
           subplot(2,1,2);
           bar(W2);
           title('Subplot 2: W2 weights pattern (barplot)');
           %}
           break
        end
       % hold off;
      iterations=iterations+1;  
       
end
%plot error rate across iterations
plot(maxerr);
